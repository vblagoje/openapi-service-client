import os
from pathlib import Path
from typing import Any, Dict, List, Optional, Protocol, Union
from urllib.parse import urlparse

from openapi_service_client.config import (
    ApiKeyAuthentication,
    AuthenticationStrategy,
    HTTPAuthentication,
    HttpClientConfig,
    OAuthAuthentication,
    PassThroughAuthentication,
)
from openapi_service_client.http_client import HttpClient, RequestsHttpClient
from openapi_service_client.providers import FunctionPayloadExtractor, LLMProvider, OpenAILLMProvider
from openapi_service_client.spec import OpenAPISpecification


class ClientConfiguration(Protocol):
    """
    ClientConfiguration defines the necessary configurations for setting up an instance of `OpenAPIServiceClient`
    in order to invoke APIs defined by the OpenAPI specification.

    Users do not create instances of `ClientConfiguration` directly. Instead, they use the `ClientConfigurationBuilder`
    to create a valid configuration.

    The minimum required configuration element is the OpenAPI specification. Other elements, such as credentials,
    HTTP client, and LLM provider, are optional and can be set using the builder.
    """

    def get_http_client(self) -> HttpClient:
        """
        Returns the configured HTTP client used for making API calls.

        :return: An instance of a class that implements the HttpClient protocol, capable of sending HTTP requests
        and receiving responses.
        """
        pass

    def get_http_client_config(self) -> HttpClientConfig:
        """
        Returns the configuration settings for the HTTP client, including timeouts, headers, and other relevant
        parameters.
        :return: HttpClientConfig object containing the configuration settings for the HTTP client.
        """
        pass

    def get_auth_config(self) -> AuthenticationStrategy:
        """
        Returns the authentication strategy configured for the client to authenticate requests made to the API.
        :return: AuthenticationStrategy object representing the configured authentication strategy.
        """
        pass

    def get_openapi_spec(self) -> OpenAPISpecification:
        """
        Retrieves the OpenAPI specification that the client uses to make API calls, detailing endpoints, operations,
        and API details.
        :return: OpenAPISpecification object representing the API's OpenAPI specification.
        """
        pass

    def get_tools_definitions(self) -> List[Dict[str, Any]]:
        """
        Returns the LLM specific function definitions derived from the OpenAPI specification. These definitions need
        to be passed to the LLM for generating function calls.
        :return: List of dictionaries containing function definitions.
        """
        pass

    def get_payload_extractor(self) -> FunctionPayloadExtractor:
        """
        Returns an extractor that interprets and processes function calling payloads generated by the LLM.
        :return: FunctionPayloadExtractor object capable of extracting function names and arguments from the
        LLM-generated function-call payloads (completions).
        """
        pass


class DefaultClientConfiguration(ClientConfiguration):

    def __init__(
        self,
        openapi_spec: Union[str, Path, Dict[str, Any]],
        credentials: Optional[Union[str, Dict[str, Any], AuthenticationStrategy]] = None,
        http_client: Optional[HttpClient] = None,
        http_client_config: Optional[HttpClientConfig] = None,
        provider: Optional[LLMProvider] = None,
    ):
        if isinstance(openapi_spec, (str, Path)) and os.path.isfile(openapi_spec):
            self.openapi_spec = OpenAPISpecification.from_file(openapi_spec)
        elif isinstance(openapi_spec, dict):
            self.openapi_spec = OpenAPISpecification.from_dict(openapi_spec)
        elif isinstance(openapi_spec, str):
            if self.is_valid_http_url(openapi_spec):
                self.openapi_spec = OpenAPISpecification.from_url(openapi_spec)
            else:
                self.openapi_spec = OpenAPISpecification.from_str(openapi_spec)
        else:
            raise ValueError("Invalid OpenAPI specification format. Expected file path or dictionary.")

        self.credentials = credentials
        self.http_client = http_client or RequestsHttpClient(http_client_config)
        self.http_client_config = http_client_config or HttpClientConfig()
        self.provider = provider or OpenAILLMProvider()

    def get_openapi_spec(self) -> OpenAPISpecification:
        return self.openapi_spec

    def get_http_client(self) -> HttpClient:
        return self.http_client

    def get_http_client_config(self) -> HttpClientConfig:
        return self.http_client_config

    def get_tools_definitions(self) -> List[Dict[str, Any]]:
        return self.provider.get_schema_converter(self.openapi_spec).convert()

    def get_payload_extractor(self) -> FunctionPayloadExtractor:
        return self.provider.get_payload_extractor()

    def get_auth_config(self) -> AuthenticationStrategy:
        if self.credentials is None:
            return PassThroughAuthentication()

        if isinstance(self.credentials, AuthenticationStrategy):
            return self.credentials

        security_schemes = self.openapi_spec.get_security_schemes()
        if isinstance(self.credentials, str):
            return self._create_authentication_from_string(self.credentials, security_schemes)
        elif isinstance(self.credentials, dict):
            return self._create_authentication_from_dict(self.credentials)
        else:
            raise ValueError(f"Unsupported credentials type: {type(self.credentials)}")

    def _create_authentication_from_string(
        self, credentials: str, security_schemes: Dict[str, Any]
    ) -> AuthenticationStrategy:
        for _, scheme in security_schemes.items():
            if scheme["type"] == "apiKey":
                return ApiKeyAuthentication(api_key=credentials)
            elif scheme["type"] == "http":
                return HTTPAuthentication(token=credentials)
            elif scheme["type"] == "oauth2":
                return OAuthAuthentication(access_token=credentials)

        raise ValueError(f"Unable to create authentication from provided credentials: {credentials}")

    def _create_authentication_from_dict(self, credentials: Dict[str, Any]) -> AuthenticationStrategy:
        if "username" in credentials and "password" in credentials:
            return HTTPAuthentication(username=credentials["username"], password=credentials["password"])
        elif "api_key" in credentials:
            return ApiKeyAuthentication(api_key=credentials["api_key"])
        elif "token" in credentials:
            return HTTPAuthentication(token=credentials["token"])
        elif "access_token" in credentials:
            token_type = credentials.get("token_type", "Bearer")
            return OAuthAuthentication(access_token=credentials["access_token"], token_type=token_type)
        else:
            raise ValueError("Unable to create authentication from provided credentials: {credentials}")

    def is_valid_http_url(self, url: str) -> bool:
        """Check if a URL is a valid HTTP/HTTPS URL."""
        r = urlparse(url)
        return all([r.scheme in ["http", "https"], r.netloc])


class ClientConfigurationBuilder:
    """
    ClientConfigurationBuilder provides a fluent interface for constructing a `ClientConfiguration`. This builder
    allows for the step-by-step configuration of all necessary components to interact with an API defined by an
    OpenAPI specification. The builder ensures that all configurations are set before building a valid
    `ClientConfiguration` instance.

    Users typically start by setting the OpenAPI specification and then proceed to configure the credentials,
    HTTP client, and LLM provider. Once all configurations are set, the builder constructs a `ClientConfiguration`
    instance that can be used to create an `OpenAPIServiceClient` for invoking API operations.
    """

    def __init__(self):
        self._openapi_spec: Union[str, Path, Dict[str, Any], None] = None
        self._credentials: Optional[Union[str, Dict[str, Any], AuthenticationStrategy]] = None
        self._http_client: Optional[HttpClient] = None
        self._http_client_config: Optional[HttpClientConfig] = None
        self._provider: Optional[LLMProvider] = None

    def with_openapi_spec(self, openapi_spec: Union[str, Path, Dict[str, Any]]) -> "ClientConfigurationBuilder":
        """
        Sets the OpenAPI specification for the configuration.

        :param openapi_spec: The OpenAPI specification as a URL, file path, or dictionary.
        :return: The instance of this builder to allow for method chaining.
        """
        self._openapi_spec = openapi_spec
        return self

    def with_credentials(
        self, credentials: Union[str, Dict[str, Any], AuthenticationStrategy]
    ) -> "ClientConfigurationBuilder":
        """
        Specifies the credentials used for authenticating requests made by the client.

        :param credentials: Credentials as a string, dictionary, or an AuthenticationStrategy instance.
        :return: The instance of this builder to allow for method chaining.
        """
        self._credentials = credentials
        return self

    def with_http_client(self, http_client: HttpClient) -> "ClientConfigurationBuilder":
        """
        Specifies the HTTP client to be used for making API calls.
        If not set, the default `RequestsHttpClient` is used.

        :param http_client: The HTTP client implementation.
        :return: The instance of this builder to allow for method chaining.
        """
        self._http_client = http_client
        return self

    def with_http_client_config(self, http_client_config: HttpClientConfig) -> "ClientConfigurationBuilder":
        """
        Specifies the HTTP client configuration.

        If not set, the default configuration is used.

        :param http_client_config: Configuration settings for the HTTP client.
        :return: The instance of this builder to allow for method chaining.
        """
        self._http_client_config = http_client_config
        return self

    def with_provider(self, provider: LLMProvider) -> "ClientConfigurationBuilder":
        """
        Specifies the LLM provider to be used for extracting and converting payloads.
        If not set, the default `OpenAILLMProvider` is used.

        :param provider: The provider that implements the LLMProvider interface.
        :return: The instance of this builder to allow for method chaining.
        """
        self._provider = provider
        return self

    def build(self) -> ClientConfiguration:
        """
        Constructs a `ClientConfiguration` instance using the settings provided. It validates that an OpenAPI
        specification has been set before proceeding with the build.

        :return: A configured instance of ClientConfiguration.
        :raises ValueError: If the OpenAPI specification is not set.
        """
        if self._openapi_spec is None:
            raise ValueError("OpenAPI specification must be provided to build a configuration.")

        return DefaultClientConfiguration(
            openapi_spec=self._openapi_spec,
            credentials=self._credentials,
            http_client=self._http_client,
            http_client_config=self._http_client_config,
            provider=self._provider,
        )
